# Using the google sheets API via an oauth desktop app, create a new google sheets document with:
#
# * a title of python test
# * a headings row with labels 'x', 'y', 'z' offset by 1 column to allow for the formulae labels in the next steps
# * 10 rows of data generated by the python random module
# * a min row that calculates the MIN using sheets formula, of the x, y, z columns, highlighted in bold and labelled 'min'
# * a max row that calculates the MAX using sheets formula, of the x, y, z columns, highlighted in bold and labelled 'max'
# * a mean row that calculates the MEAN using sheets formula, of the x, y, z columns, highlighted in bold and labelled 'mean'

import random
from googleapiclient.discovery import build
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
import os
import json
import time
import logging
from datetime import datetime



# If modifying these scopes, delete the file token.json.
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']

def get_credentials():
    creds = None
    # The file token.json stores the user's access and refresh tokens, and is created automatically when the authorization flow completes for the first time.
    if os.path.exists('token.json'):
        creds = Credentials.from_authorized_user_file('token.json')
    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file('credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open('token.json', 'w') as token:
            token.write(creds.to_json())
    return creds

def set_developer_metadata(service, spreadsheet_id, metadata_key, metadata_value, location_type, location_id):
    try:
        body = {
            'requests': [{
                'createDeveloperMetadata': {
                    'developerMetadata': {
                        'metadataKey': metadata_key,
                        'metadataValue': metadata_value,
                        'location': {
                            'dimensionRange': {
                                'sheetId': location_id,
                                'dimension': location_type,
                                'startIndex': 0,
                                'endIndex': 1
                            }
                        },
                        'visibility': 'DOCUMENT'
                    }
                }
            }]
        }
        response = service.spreadsheets().batchUpdate(spreadsheetId=spreadsheet_id, body=body).execute()
        metadata_id = response['replies'][0]['createDeveloperMetadata']['developerMetadata']['metadataId']
        logging.info(f"Developer metadata set successfully with ID: {metadata_id}")
        return metadata_id
    except Exception as e:
        logging.error(f"Error setting developer metadata: {e}")
        raise


def get_developer_metadata(service, spreadsheet_id, metadata_key):
    try:
        result = service.spreadsheets().developerMetadata().get(spreadsheetId=spreadsheet_id, metadataId=metadata_key).execute()
        metadata = result.get('developerMetadata', {})
        logging.info(f"Retrieved Metadata: {metadata}")
        return metadata
    except Exception as e:
        logging.error(f"Error retrieving developer metadata: {e}")
        raise

def search_developer_metadata(service, spreadsheet_id, metadata_key):
    try:
        request = {
            'dataFilters': [{
                'developerMetadataLookup': {
                    'metadataKey': metadata_key
                }
            }]
        }
        response = service.spreadsheets().developerMetadata().search(spreadsheetId=spreadsheet_id, body=request).execute()
        metadata_entries = response.get('matchedDeveloperMetadata', [])
        logging.info(f"Found metadata entries: {metadata_entries}")
        return metadata_entries
    except Exception as e:
        logging.error(f"Error searching for developer metadata: {e}")
        raise



def create_sheet():
    creds = get_credentials()
    service = build('sheets', 'v4', credentials=creds)

    if not creds:
        print('No valid credentials found.')
        return
    
    # Get the spreadsheet ID from the sheet.json file, if exists.
    if os.path.exists('sheet.json'):
        # Read the spreadsheet ID from the sheet.json file
        try:
            with open('sheet.json', 'r') as f:
                spreadsheet_id = json.load(f)['spreadsheetId']
        except json.decoder.JSONDecodeError:
            print('Error decoding JSON file.')
            spreadsheet_id = None
    else:
        # Create a new google sheets document
        spreadsheet_id = None
        print('No spreadsheet ID found.')

    # Create a new google sheets document
    if not spreadsheet_id:
        # Create a new google sheets document
        spreadsheet = service.spreadsheets().create(body={'properties': {'title': 'Python Test'}}, fields='spreadsheetId').execute()
        spreadsheet_id = spreadsheet['spreadsheetId']
        print('Created new spreadsheet with ID: ' + spreadsheet_id)
        # Save the spreadsheet ID to the sheet.json file
        with open('sheet.json', 'w') as f:
            json.dump({'spreadsheetId': spreadsheet_id}, f)
    else:
        print('Using existing spreadsheet ID: ' + spreadsheet_id)
        spreadsheet = service.spreadsheets().get(spreadsheetId=spreadsheet_id).execute()
        print('Spreadsheet title: ' + spreadsheet['properties']['title'])

    # Update the sheet title with last modified time
    requests = [
        {
            'updateSpreadsheetProperties': {
                'properties': {
                    'title': 'Python Test' + ' ' + time.strftime('%Y-%m-%d %H:%M:%S'),
                    'timeZone': 'Europe/London'
                },
                'fields': 'title'
            }
        }
    ]
    body = {
        'requests': requests
    }
    service.spreadsheets().batchUpdate(spreadsheetId=spreadsheet_id, body=body).execute()

    # Add the headings row
    requests = [
        {
            'updateCells': {
                'rows': [
                    {
                        'values': [
                            {
                                'userEnteredValue': {'stringValue': 'x'}
                            },
                            {
                                'userEnteredValue': {'stringValue': 'y'}
                            },
                            {
                                'userEnteredValue': {'stringValue': 'z'}
                            }
                        ]
                    }
                ],
                'fields': 'userEnteredValue',
                'start': {
                    'sheetId': 0,
                    'rowIndex': 0,
                    'columnIndex': 1
                }
            }
        }
    ]

    # Add 100 rows of random data between 1 and 1000
    for i in range(1, 101):
        x = random.randint(1, 1000)
        y = random.randint(1, 1000)
        z = random.randint(1, 1000)
        requests.append(
            {
                'updateCells': {
                    'rows': [
                        {
                            'values': [
                                {
                                    'userEnteredValue': {'numberValue': x}
                                },
                                {
                                    'userEnteredValue': {'numberValue': y}
                                },
                                {
                                    'userEnteredValue': {'numberValue': z}
                                }
                            ]
                        }
                    ],
                    'fields': 'userEnteredValue',
                    'start': {
                        'sheetId': 0,
                        'rowIndex': i,
                        'columnIndex': 1
                    }
                }
            }
        )

    # Add the min row
    requests.append(
        {
            'updateCells': {
                'rows': [
                    {
                        'values': [
                            {
                                # label - Minimum
                                'userEnteredValue': {'stringValue': 'Minimum'},
                                'userEnteredFormat': {'textFormat': {'bold': True}}
                            },
                            {
                                'userEnteredValue': {'formulaValue': '=MIN(B2:B101)'},
                                'userEnteredFormat': {'textFormat': {'bold': True}}
                            },
                            {
                                'userEnteredValue': {'formulaValue': '=MIN(C2:C101)'},
                                'userEnteredFormat': {'textFormat': {'bold': True}}
                            },
                            {
                                'userEnteredValue': {'formulaValue': '=MIN(D2:D101)'},
                                'userEnteredFormat': {'textFormat': {'bold': True}}
                            }
                        ]
                    }
                ],
                'fields': 'userEnteredValue,userEnteredFormat',
                'start': {
                    'sheetId': 0,
                    'rowIndex': 101,
                    'columnIndex': 0
                }
            }
        }
    )

    # Add the max row
    requests.append(
        {
            'updateCells': {
                'rows': [
                    {
                        'values': [
                            {
                                'userEnteredValue': {'stringValue': 'Maximum'},
                                'userEnteredFormat': {'textFormat': {'bold': True}}
                            },
                            {
                                'userEnteredValue': {'formulaValue': '=MAX(B2:B101)'},
                                'userEnteredFormat': {'textFormat': {'bold': True}}
                            },
                            {
                                'userEnteredValue': {'formulaValue': '=MAX(C2:C101)'},
                                'userEnteredFormat': {'textFormat': {'bold': True}}
                            },
                            {
                                'userEnteredValue': {'formulaValue': '=MAX(D2:D101)'},
                                'userEnteredFormat': {'textFormat': {'bold': True}}
                            }
                        ]
                    }
                ],
                'fields': 'userEnteredValue,userEnteredFormat',
                'start': {
                    'sheetId': 0,
                    'rowIndex': 102,
                    'columnIndex': 0
                }
            }
        }
    )

    # Add the mean row
    requests.append(
        {
            'updateCells': {
                'rows': [
                    {
                        'values': [
                            {
                                'userEnteredValue': {'stringValue': 'Average'},
                                'userEnteredFormat': {'textFormat': {'bold': True}}
                            },
                            {
                                'userEnteredValue': {'formulaValue': '=AVERAGE(B2:B101)'},
                                'userEnteredFormat': {'textFormat': {'bold': True}}
                            },
                            {
                                'userEnteredValue': {'formulaValue': '=AVERAGE(C2:C101)'},
                                'userEnteredFormat': {'textFormat': {'bold': True}}
                            },
                            {
                                'userEnteredValue': {'formulaValue': '=AVERAGE(D2:D101)'},
                                'userEnteredFormat': {'textFormat': {'bold': True}}
                            }
                        ]
                    }
                ],
                'fields': 'userEnteredValue,userEnteredFormat',
                'start': {
                    'sheetId': 0,
                    'rowIndex': 103,
                    'columnIndex': 0
                }
            }
        }
    )

    # Execute the requests
    body = {
        'requests': requests
    }
    service.spreadsheets().batchUpdate(spreadsheetId=spreadsheet_id, body=body).execute()


def get_sheet(service, spreadsheet_id, sheet_id=0):
    # Get a sheet from the spreadsheet
    sheet = service.spreadsheets().get(spreadsheetId=spreadsheet_id).execute()
    return sheet['sheets'][sheet_id]

def get_sheet_values(service, spreadsheet_id, sheet_id=0):
    # Get the values from a sheet
    sheet = get_sheet(service, spreadsheet_id, sheet_id)
    return sheet['data'][0]['rowData']




def update_sheet():
    creds = get_credentials()
    service = build('sheets', 'v4', credentials=creds)

    if not creds:
        print('No valid credentials found.')
        return
    
    # Get the spreadsheet ID from the sheet.json file, error if doesn't exist
    if os.path.exists('sheet.json'):
        # Read the spreadsheet ID from the sheet.json file
        try:
            with open('sheet.json', 'r') as f:
                spreadsheet_id = json.load(f)['spreadsheetId']
        except json.decoder.JSONDecodeError:
            print('Error decoding JSON file.')
            spreadsheet_id = None
    else: 
        raise FileNotFoundError('sheet.json file not found.')
    
    # Display developer metadata
    print(f'Spreadsheet ID: {spreadsheet_id}')

    metadata_key = 'mike_data'
    metadata_value = 'exampleValue'
    location_type = 'ROWS'  # Could also be COLUMNS, SHEET, SPREADSHEET
    location_id = 0  # Typically, the sheet ID

    # Get developer metadata
    metadata_entries = search_developer_metadata(service, spreadsheet_id, metadata_key)
    print(f'Metadata: {metadata_entries}')

    if metadata_entries:
        metadata_id = metadata_entries[0]['developerMetadata']['metadataId']
        print(f'Metadata ID: {metadata_id}')
    
        # get metadata by id
        metadata_value = get_developer_metadata(service, spreadsheet_id, metadata_id)
        print(f'Developer Metadata: {metadata_value}')

    # update metadata
    metadata_value = f'Updated metadata from Python script at {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'
    print(f'Updated metadata: {metadata_value}')

    # Set developer metadata
    set_developer_metadata(service, spreadsheet_id, metadata_key, metadata_value, location_type, location_id)

    


if __name__ == '__main__':
#    create_sheet()

    #update_sheet()
 